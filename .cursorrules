# OpenStreetMap-NG

OpenStreetMap-NG is a modern, high-performance Python implementation of the OpenStreetMap platform.

## Core Architecture

**Backend:**

- Python 3.13 with async FastAPI and Psycopg3
- Optional Cython Pure Python Mode compilation support
- High-performance `speedup` Python C extension for critical code paths
- PostgreSQL 17 with PostGIS

**Frontend:**

- Server-side rendered HTML with Jinja2 templates
- Node.js with pnpm, and Vite build tool
- TypeScript (ES2023) with typed-query-selector, and MapLibre GL JS:
  - Avoid using `as HTML...` casts: prefer to rely on typed-query-selector smart detection
- SCSS with Bootstrap 5:
  - Inline styles are heavily discouraged
  - Generally avoid using `px` units: prefer `em`/`rem` where it makes sense
- Bootstrap Icons

## Project Structure

```txt
app/
├── controllers/        # Request handlers
├── exceptions/         # Exception definitions
├── format/             # Parsing and serialization
├── lib/                # Shared backend library
├── middlewares/        # Request/response middleware
├── migrations/         # Database migrations
├── models/
│├── models/db/         # Database models
│├── models/proto/      # Protobuf definitions and generated Python bindings
│└── ...                # Local models
├── queries/            # Read-only database queries
├── services/           # Read-write database operations
├── static/             # Frontend assets (generated JS/CSS, images, etc.)
├── validators/         # Input validation
├── views/              # Frontend templates, TypeScript, and styles
│├── views/lib/         # Shared frontend library
││├── views/lib/proto/  # Protobuf generated TypeScript bindings
││└── ...
│└── ...
└── ...

config/
├── locale/
│├── extra_en.yaml      # New-style localizable strings (editable)
│├── en.yaml            # Old-style localizable strings (read-only)
│└── ...
└── ...

scripts/                # Utility scripts (used by shell.nix)
speedup/                # High-performance Python C extension
tests/                  # Test suite

biome.json              # TypeScript formatting/linting
package.json            # TypeScript dependencies
pyproject.toml          # Python dependencies, ruff/pyright/pytest, etc.
shell.nix               # Reproducible environment definition
vite.config.js          # Vite dev/build configuration
```

## Development Workflow

**Application Server:**

Server should only be run by the human. Test suites execute regardless of server state.

```bash
run
# INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)
# INFO: Started reloader process [...] using WatchFiles
```

**Code Quality:**

```bash
format                # Format and check **all code**: Python, TypeScript, JSON, SCSS, HTML, Nix, etc.
pyright               # Python-only type checking
run-tests             # Test suite
run-tests --extended  # Extended test suite, marked by @pytest.mark.extended (slow)
```

**Asset Pipelines:**

All pipelines run automatically on changes in the background. Manual execution available for error checking:

```bash
proto-pipeline   # Compile Protobuf
locale-pipeline  # Compile locales
vite build       # Compile TypeScript and SCSS
```
