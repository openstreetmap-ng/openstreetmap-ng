syntax = "proto3";

// =============================================
// Caching System
// =============================================

// Encapsulates cached binary data with additional metadata
message FileCacheMeta {
    bytes data = 1;  // Raw binary payload
    optional uint64 expires_at = 2;  // Unix timestamp when this cache entry becomes invalid
}

// =============================================
// Authentication & Security
// =============================================

// User token with unique identifier for fast retrieval
message UserTokenStruct {
    uint64 id = 1;  // Internal system identifier for the token
    bytes token = 2;  // Hashed authentication token bytes
}

// Stateless user token that doesn't require database storage
message StatelessUserTokenStruct {
    uint64 timestamp = 1;  // Token creation timestamp
    uint64 user_id = 2;    // User identifier
    bytes email_hashed = 3;  // Hash of user's email for validation

    // Optional unsubscribe related fields
    message UnsubscribeData {
        string target = 1;  // Target type to unsubscribe from (e.g., "diary", "changeset")
        uint64 target_id = 2;  // Target resource identifier
    }
    optional UnsubscribeData unsubscribe = 4;
}

// Password storage schema with versioning support
message UserPassword {
    message Legacy {
        string digest = 1;  // Precomputed hash digest (argon2/md5/pbkdf2)
        optional string extra = 2;  // Algorithm-specific parameters (e.g., salt, iterations)
    }

    message V1 {
        bytes hash = 1;  // Argon2id hash output (server-side computed from client-side hash)
        bytes salt = 2;  // Cryptographically random salt
    }

    oneof schema {
        Legacy legacy = 1;
        V1 v1 = 2;
    }
}

// Represents state during OAuth/OpenID Connect authentication flows
message AuthProviderState {
    uint64 timestamp = 1;  // Flow initiation timestamp
    string provider = 2;  // Provider identifier (e.g., "google", "github")
    string action = 3;  // Authentication intent (e.g., "login", "signup")
    optional string referer = 4;  // Original referring page URL
    bytes nonce = 5;  // Cryptographic nonce
}

// Successful authentication result from external provider
message AuthProviderVerification {
    uint64 timestamp = 1;  // Verification timestamp
    string provider = 2;  // Provider identifier matching AuthProviderState
    string uid = 3;  // Provider's unique user identifier
    optional string name = 4;  // Human-readable name (if available)
    optional string email = 5;  // Verified email address (if available)
}
